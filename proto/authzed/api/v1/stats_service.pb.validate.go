// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: authzed/api/v1/stats_service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetRelationshipCardinalityRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetRelationshipCardinalityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRelationshipCardinalityRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetRelationshipCardinalityRequestMultiError, or nil if none found.
func (m *GetRelationshipCardinalityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRelationshipCardinalityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelationship()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRelationshipCardinalityRequestValidationError{
					field:  "Relationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRelationshipCardinalityRequestValidationError{
					field:  "Relationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelationship()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRelationshipCardinalityRequestValidationError{
				field:  "Relationship",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRelationshipCardinalityRequestMultiError(errors)
	}

	return nil
}

// GetRelationshipCardinalityRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetRelationshipCardinalityRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRelationshipCardinalityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRelationshipCardinalityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRelationshipCardinalityRequestMultiError) AllErrors() []error { return m }

// GetRelationshipCardinalityRequestValidationError is the validation error
// returned by GetRelationshipCardinalityRequest.Validate if the designated
// constraints aren't met.
type GetRelationshipCardinalityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelationshipCardinalityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelationshipCardinalityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelationshipCardinalityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelationshipCardinalityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelationshipCardinalityRequestValidationError) ErrorName() string {
	return "GetRelationshipCardinalityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRelationshipCardinalityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelationshipCardinalityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelationshipCardinalityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelationshipCardinalityRequestValidationError{}

// Validate checks the field values on GetRelationshipCardinalityResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetRelationshipCardinalityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRelationshipCardinalityResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetRelationshipCardinalityResponseMultiError, or nil if none found.
func (m *GetRelationshipCardinalityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRelationshipCardinalityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cardinality

	if len(errors) > 0 {
		return GetRelationshipCardinalityResponseMultiError(errors)
	}

	return nil
}

// GetRelationshipCardinalityResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetRelationshipCardinalityResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRelationshipCardinalityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRelationshipCardinalityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRelationshipCardinalityResponseMultiError) AllErrors() []error { return m }

// GetRelationshipCardinalityResponseValidationError is the validation error
// returned by GetRelationshipCardinalityResponse.Validate if the designated
// constraints aren't met.
type GetRelationshipCardinalityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelationshipCardinalityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelationshipCardinalityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelationshipCardinalityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelationshipCardinalityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelationshipCardinalityResponseValidationError) ErrorName() string {
	return "GetRelationshipCardinalityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRelationshipCardinalityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelationshipCardinalityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelationshipCardinalityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelationshipCardinalityResponseValidationError{}

// Validate checks the field values on UpdateRelationshipCardinalityRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateRelationshipCardinalityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRelationshipCardinalityRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateRelationshipCardinalityRequestMultiError, or nil if none found.
func (m *UpdateRelationshipCardinalityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRelationshipCardinalityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelationship()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRelationshipCardinalityRequestValidationError{
					field:  "Relationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRelationshipCardinalityRequestValidationError{
					field:  "Relationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelationship()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRelationshipCardinalityRequestValidationError{
				field:  "Relationship",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRelationshipCardinalityRequestMultiError(errors)
	}

	return nil
}

// UpdateRelationshipCardinalityRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateRelationshipCardinalityRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRelationshipCardinalityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRelationshipCardinalityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRelationshipCardinalityRequestMultiError) AllErrors() []error { return m }

// UpdateRelationshipCardinalityRequestValidationError is the validation error
// returned by UpdateRelationshipCardinalityRequest.Validate if the designated
// constraints aren't met.
type UpdateRelationshipCardinalityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRelationshipCardinalityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRelationshipCardinalityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRelationshipCardinalityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRelationshipCardinalityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRelationshipCardinalityRequestValidationError) ErrorName() string {
	return "UpdateRelationshipCardinalityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRelationshipCardinalityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRelationshipCardinalityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRelationshipCardinalityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRelationshipCardinalityRequestValidationError{}

// Validate checks the field values on UpdateRelationshipCardinalityResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateRelationshipCardinalityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRelationshipCardinalityResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateRelationshipCardinalityResponseMultiError, or nil if none found.
func (m *UpdateRelationshipCardinalityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRelationshipCardinalityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRelationshipCardinalityResponseMultiError(errors)
	}

	return nil
}

// UpdateRelationshipCardinalityResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateRelationshipCardinalityResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateRelationshipCardinalityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRelationshipCardinalityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRelationshipCardinalityResponseMultiError) AllErrors() []error { return m }

// UpdateRelationshipCardinalityResponseValidationError is the validation error
// returned by UpdateRelationshipCardinalityResponse.Validate if the
// designated constraints aren't met.
type UpdateRelationshipCardinalityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRelationshipCardinalityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRelationshipCardinalityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRelationshipCardinalityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRelationshipCardinalityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRelationshipCardinalityResponseValidationError) ErrorName() string {
	return "UpdateRelationshipCardinalityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRelationshipCardinalityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRelationshipCardinalityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRelationshipCardinalityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRelationshipCardinalityResponseValidationError{}
