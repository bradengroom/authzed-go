// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: authzed/api/v1/stats_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StatsService_GetRelationshipCardinality_FullMethodName    = "/authzed.api.v1.StatsService/GetRelationshipCardinality"
	StatsService_UpdateRelationshipCardinality_FullMethodName = "/authzed.api.v1.StatsService/UpdateRelationshipCardinality"
)

// StatsServiceClient is the client API for StatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsServiceClient interface {
	GetRelationshipCardinality(ctx context.Context, in *GetRelationshipCardinalityRequest, opts ...grpc.CallOption) (StatsService_GetRelationshipCardinalityClient, error)
	UpdateRelationshipCardinality(ctx context.Context, in *UpdateRelationshipCardinalityRequest, opts ...grpc.CallOption) (StatsService_UpdateRelationshipCardinalityClient, error)
}

type statsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsServiceClient(cc grpc.ClientConnInterface) StatsServiceClient {
	return &statsServiceClient{cc}
}

func (c *statsServiceClient) GetRelationshipCardinality(ctx context.Context, in *GetRelationshipCardinalityRequest, opts ...grpc.CallOption) (StatsService_GetRelationshipCardinalityClient, error) {
	stream, err := c.cc.NewStream(ctx, &StatsService_ServiceDesc.Streams[0], StatsService_GetRelationshipCardinality_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &statsServiceGetRelationshipCardinalityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatsService_GetRelationshipCardinalityClient interface {
	Recv() (*GetRelationshipCardinalityResponse, error)
	grpc.ClientStream
}

type statsServiceGetRelationshipCardinalityClient struct {
	grpc.ClientStream
}

func (x *statsServiceGetRelationshipCardinalityClient) Recv() (*GetRelationshipCardinalityResponse, error) {
	m := new(GetRelationshipCardinalityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statsServiceClient) UpdateRelationshipCardinality(ctx context.Context, in *UpdateRelationshipCardinalityRequest, opts ...grpc.CallOption) (StatsService_UpdateRelationshipCardinalityClient, error) {
	stream, err := c.cc.NewStream(ctx, &StatsService_ServiceDesc.Streams[1], StatsService_UpdateRelationshipCardinality_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &statsServiceUpdateRelationshipCardinalityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatsService_UpdateRelationshipCardinalityClient interface {
	Recv() (*UpdateRelationshipCardinalityResponse, error)
	grpc.ClientStream
}

type statsServiceUpdateRelationshipCardinalityClient struct {
	grpc.ClientStream
}

func (x *statsServiceUpdateRelationshipCardinalityClient) Recv() (*UpdateRelationshipCardinalityResponse, error) {
	m := new(UpdateRelationshipCardinalityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatsServiceServer is the server API for StatsService service.
// All implementations must embed UnimplementedStatsServiceServer
// for forward compatibility
type StatsServiceServer interface {
	GetRelationshipCardinality(*GetRelationshipCardinalityRequest, StatsService_GetRelationshipCardinalityServer) error
	UpdateRelationshipCardinality(*UpdateRelationshipCardinalityRequest, StatsService_UpdateRelationshipCardinalityServer) error
	mustEmbedUnimplementedStatsServiceServer()
}

// UnimplementedStatsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatsServiceServer struct {
}

func (UnimplementedStatsServiceServer) GetRelationshipCardinality(*GetRelationshipCardinalityRequest, StatsService_GetRelationshipCardinalityServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRelationshipCardinality not implemented")
}
func (UnimplementedStatsServiceServer) UpdateRelationshipCardinality(*UpdateRelationshipCardinalityRequest, StatsService_UpdateRelationshipCardinalityServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateRelationshipCardinality not implemented")
}
func (UnimplementedStatsServiceServer) mustEmbedUnimplementedStatsServiceServer() {}

// UnsafeStatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsServiceServer will
// result in compilation errors.
type UnsafeStatsServiceServer interface {
	mustEmbedUnimplementedStatsServiceServer()
}

func RegisterStatsServiceServer(s grpc.ServiceRegistrar, srv StatsServiceServer) {
	s.RegisterService(&StatsService_ServiceDesc, srv)
}

func _StatsService_GetRelationshipCardinality_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRelationshipCardinalityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServiceServer).GetRelationshipCardinality(m, &statsServiceGetRelationshipCardinalityServer{stream})
}

type StatsService_GetRelationshipCardinalityServer interface {
	Send(*GetRelationshipCardinalityResponse) error
	grpc.ServerStream
}

type statsServiceGetRelationshipCardinalityServer struct {
	grpc.ServerStream
}

func (x *statsServiceGetRelationshipCardinalityServer) Send(m *GetRelationshipCardinalityResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StatsService_UpdateRelationshipCardinality_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateRelationshipCardinalityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServiceServer).UpdateRelationshipCardinality(m, &statsServiceUpdateRelationshipCardinalityServer{stream})
}

type StatsService_UpdateRelationshipCardinalityServer interface {
	Send(*UpdateRelationshipCardinalityResponse) error
	grpc.ServerStream
}

type statsServiceUpdateRelationshipCardinalityServer struct {
	grpc.ServerStream
}

func (x *statsServiceUpdateRelationshipCardinalityServer) Send(m *UpdateRelationshipCardinalityResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StatsService_ServiceDesc is the grpc.ServiceDesc for StatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authzed.api.v1.StatsService",
	HandlerType: (*StatsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRelationshipCardinality",
			Handler:       _StatsService_GetRelationshipCardinality_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateRelationshipCardinality",
			Handler:       _StatsService_UpdateRelationshipCardinality_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "authzed/api/v1/stats_service.proto",
}
